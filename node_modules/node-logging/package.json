{
  "name": "node-logging",
  "description": "Simple colorized logging for Node.js with request logger Connect middleware",
  "version": "0.1.3",
  "homepage": "https://github.com/HerdHound/profilejs",
  "keywords": [
    "logging",
    "connect",
    "middleware"
  ],
  "author": {
    "name": "Herd Hound",
    "email": "branko@herdhound.com"
  },
  "maintainers": [
    {
      "name": "Branko Vukelic",
      "email": "branko@herdhound.com"
    }
  ],
  "main": "index.js",
  "bugs": {
    "mail": "branko@herdhound.com",
    "url": "https://github.com/HerdHound/node-logging/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://HerdHound@github.com/HerdHound/node-logging.git"
  },
  "engines": {
    "node": ">= 0.4.1"
  },
  "dependencies": {
    "colors": ">= 0.5.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/HerdHound/node-logging/raw/master/LICENSE"
    }
  ],
  "readme": "# node-logging\n\nThis library adds a very simple logging facility with automatic timestamping\nand tagging (e.g, ``INF:``, ``DBG:``) of log messages.\n\nExample output:\n\n![Sample node-logging output](https://github.com/HerdHound/node-logging/raw/master/sample.jpg)\n\n## Installing\n\nTo install, use NPM:\n\n    npm install node-logging\n\n## Usage\n\nYou can require it as usual:\n\n    var logging = require('node-logging');\n\nTo change the log level:\n\n    logging.setLevel('error');\n\nThere are four log levels ordered by importance (from least important to more\nimportant):\n\n + _debug_: verbose debug messages\n + _info_: informational messages\n + _error_: error messages\n + _critical_: (bad) error messages\n\nSetting the log level basically filters out messages of less importance. For\nexample, setting the log level to 'error' will filter out 'info' and 'debug'\nmessages (they simply won't be logged).\n\nTo log a single info message:\n\n    logging.inf('Message');\n\nEach log level has it's own method:\n\n + _debug_: logging.dbg()\n + _info_: logging.inf()\n + _error_: logging.err()\n + _critical_: logging.bad()\n\nEach of the logging methods take a message as first argument, and optional\n``trace`` flag. Trace flag will print out the stack trace immediately following\nthe log message if set to ``true``. For example:\n\n    logging.bad('Woops!', true);\n\n## Using the Express middleware\n\nIf you use Express, node-logging sports a middleware that will log details\nabout each of your requests (you can see it in the sample output at the\nbeginning of this file).\n\nSimply add this middleware to the stack:\n\n    app.use(logging.requestLogger);\n\nDuring the request, the request object has a ``log`` property which houses a\nfew methods you can use to log more details about the request.\n\nTo log a single message, use the ``push`` method:\n\n    req.log.push('Some point in execution');\n\nTo log an asynchronous call with timer:\n\n    req.log.startTimer('MyTimer');\n\n    setTimeout(function() {\n      req.log.endMyTimer('Finished async operation'),\n    }, 200);\n\nThe ``startTimer`` method takes a single argument, timer label. This timer\nlabel becomes part of the method that stops it. In the above example, for the\nlabel ``MyTimer``, you will get a method called ``endMyTimer``. If you label\nyour timer ``foo``, your end method will be ``endfoo``.\n\nAll messages that you log inside your request will appear under 'User messages'\nsection in your logs.\n\nHere is a sample output:\n\n![Sample output of the user messages](https://github.com/HerdHound/node-logging/raw/master/user_messages.jpg)\n\nYou can terminate logging without finishing the response by calling the\n``req.log.terminate`` method. This method takes a single argument ``msg`` which\nwill be appended to the log. Normally, logging will only output the log if the \nresponse actually finishes. ``req.log.terminate`` method can be used to force\nlog output when you know response will never finish:\n\n    app.get('/login', function(req, res, next) {\n\n      User.find({username: req.param('username')}, function(err, user) {\n        if (err) {\n           req.log.terminate('Database error: ' + err);\n           next(err);\n           return;\n        }\n\n        // log the user in, etc, etc...\n\n      });\n\n    });\n\n## Excluding parameters from request logger\n\nSometimes you don't want certain parameters logged. A good example is users'\nclear-text passwords. In such cases, you can set excludes to skip these \nparameters.\n\n    logging.setExcludes(['password', 'pw']);\n\nBy default, parameter called 'password' will be excluded. However, if you don't\nwant to exclude the 'password' parameter, you can just set the excludes to an\nempty array:\n\n    logging.setExcludes([]);\n\nThe above disables any excludes.\n\nExcluded parameters will be logged as having value '(excluded)'. This is done\nso that you can still see that the parameter was passed.\n",
  "readmeFilename": "README.mkd",
  "_id": "node-logging@0.1.3",
  "dist": {
    "shasum": "6477a12efa215a105d943ed2a892e1103cec51f1"
  },
  "_from": "node-logging@0.1.3"
}
